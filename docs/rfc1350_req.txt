                          THE TFTP PROTOCOL

1. Purpose

   TFTP (Trivial File Transfer Protocol) is implemented on top of the Internet User Datagram protocol (UDP or Datagram).
   It can read and write files from/to a remote server.
   It passes 8 bit bytes of data.

   Two modes of transfer are supported:
   - netascii (8 bit ascii with the modifications specified in "Telnet Protocol Specification");
   - octet (raw 8 bit bytes); 
   - Additional modes can be defined by pairs of cooperating hosts.

2. Overview of the Protocol

   Both machines involved in a transfer are considered senders and receivers: one sends data and receives acknowledgments, the other sends acknowledgments and receives data.

   Any transfer begins with a request from the client to read or write a file, which also serves to request a connection.
   If the server grants the request, the connection is opened and the file is sent in fixed length blocks of 512 bytes.
   Each data packet contains one block of data, and must be acknowledged by an acknowledgment packet before the next packet can be sent.
   A data packet of less than 512 bytes signals termination of a transfer.
   If a packet gets lost in the network, the intended recipient will timeout and may retransmit his last packet (which may be data or an acknowledgment), thus causing the sender of the lost packet to retransmit that lost packet.

   An error is signalled by sending an error packet.
   An error packet is not acknowledged, and not retransmitted.
   Timeouts are used to detect termination when the error packet has been lost.

   Errors causing terminations are caused by three types of events:
   - not being able to satisfy the request (e.g., file not found, access violation, or no such user),
   - receiving a packet which cannot be explained by a delay or duplication in the network (e.g., an incorrectly formed packet),
   - losing access to a necessary resource (e.g., disk full or access denied during a transfer).

   Only one error condition does not cause termination:
   - the source port of a received packet being incorrect, in this case, an error packet is sent to the originating host.

3. Relation to other Protocols

   TFTP is implemented on top of UDP.
   TFTP packets have an optional header (LNI, ARPA header, etc.) to allow them through the local transport medium, an Internet header, a Datagram header, and a TFTP header.
   The order of the contents of a packet will be: local medium header, if used, Internet header, Datagram header, TFTP header, followed by the remainder of the TFTP packet.
   (This may or may not be data depending on the type of packet as specified in the TFTP header.)
   The source and destination port fields of the Datagram header are used by TFTP and the length field reflects the size of the TFTP packet.
   The transfer identifiers (TID's) used by TFTP are passed to the Datagram layer to be used as ports; therefore they must be between 0 and 65,535.

   The TFTP header consists of a 2 byte opcode field which indicates the packet's type (e.g., DATA, ERROR, etc.).

4. Initial Connection Protocol

   A transfer is established by sending a request.
   A WRQ request is used to write onto a foreign file system.
   A RRQ request is used to read from a foreign file system.
   If the reply is an error packet then the request has been denied.
   The positive response to a read request is the first data packet for read.
   The positive response to a write request is an acknowledgment packet with block number zero.
   An acknowledgment packet that is not the positive response of a write request will contain the block number of the data packet being acknowledged.
   Each data packet has associated with it a block number.
   Block numbers are consecutive and begin with one.

   To establish a connection each end chooses a TID for itself, to be used for the duration of that connection.
   The TID's chosen for a connection should be randomly chosen, so that the probability that the same number is chosen twice in immediate succession is very low.
   Every packet has associated with it the two TID's of the ends of the connection, the source TID and the destination TID.
   The TID's are stored in the UDP source and destination ports.
   
   A requesting host chooses its source TID and sends its initial request to the known TID 69 decimal on the serving host.
   Under normal operations, the server chooses its source TID and sends its response using its TID as its source TID and the TID chosen for the previous message by the requestor as its destination TID.
   The two chosen TID's are then used for the remainder of the transfer.
   During the transfer the hosts should make sure that the source TID of a received packet matches the previously agreed value.
   If a source TID does not match, the packet should be discarded as erroneously sent from somewhere else and an error packet should be sent to the source of the incorrect packet, while not disturbing the transfer.

4.1 Initial Connection Protocol for writing a file

   The following example shows the steps used to establish a connection to write a file.  Note that WRQ, ACK, and DATA are the names of the write request, acknowledgment, and data types of packets respectively.

      1. Host A sends  a  "WRQ"  to  host  B  with  source=  A's  TID,
         destination= 69.

      2. Host  B  sends  a "ACK" (with block number= 0) to host A with
         source= B's TID, destination= A's TID.

   At this point the connection has been established and the first data packet can be sent by Host A with a sequence number of 1.

4.2 Initial Connection Protocol for reading a file

   1. Host  A  sends  a  "RRQ"  to  host  B  with  source= A's TID,
      destination= 69.

   2. Host B sends a "DATA" (with block number= 1) to host  A  with
      source= B's TID, destination= A's TID.

4.3 Receiveing a wrong source TID packet Example

   Host A sends a request to host B. Somewhere in the network, the request packet is duplicated, and as a result two acknowledgments are returned to host A, with different TID's chosen on host B in response to the two requests.
   When the first response arrives, host A continues the connection.
   When the second response to the request arrives, it should be rejected, but there is no reason to terminate the first connection.
   Therefore, if different TID's are chosen for the two connections on host B and host A checks the source TID's of the messages it receives, the first connection can be maintained while the second is rejected by returning an error packet.

5. TFTP Packets

   TFTP supports five types of packets:
   - RRQ (read request, opcode = 1)
   - WRQ (write request, opcode = 2)
   - DATA (data, opcode = 3)
   - ACK (acknowledgment, opcode = 4)
   - ERROR (errore, opcode = 5)

   The TFTP header of a packet contains the  opcode  associated  with that packet.

5.1 RRQ/WRQ packets

    RRQ/WRQ packets (opcodes 1 and 2 respectively) share the following format:
    - Opcode (2 bytes)
    - Filename (variable-length string)
    - terminating 0 (1 byte)
    - Mode (variable-length string)
    - terminating 0 (1 byte)

   The file name is a sequence of bytes in netascii terminated by a zero byte.
   The mode field contains the string "netascii" or "octet" (or any combination of upper and lower case, such as "NETASCII", NetAscii", etc.) in netascii indicating the two modes defined in the protocol terminated by a zero byte.
   A host which receives netascii mode data must translate the data to its own format.
   Octet mode is used to transfer a file that is in the 8-bit format of the machine from which the file is being transferred.
   If a host receives a octet file and then returns it, the returned file must be identical to the original.

   Sender and recipient may operate in different modes.
   Considering a storage server for example, the sender might send files in netascii, but the storage server might simply store them without translation in 8-bit format.
   
   It is possible to define other modes for cooperating pairs of hosts.

5.2 DATA packets

    DATA packets (opcode 3) have the following format:
    - Opcode (2 bytes)
    - Block number (2 bytes)
    - Data (n bytes)

   DATA packets have a block number and data field.
   The block numbers on data packets begin with one and increase by one for each new block of data.
   An implementation should detect duplicated packets via the block number.
   The data field is from zero to 512 bytes long.
   If it is 512 bytes long, the block is not the last block of data.
   If it is from zero to 511 bytes long, it signals the end of the transfer.

   All packets other than duplicate ACK's and those used for termination are acknowledged unless a timeout occurs.
   Sending a DATA packet is an acknowledgment for the first ACK packet of the previous DATA packet.
   The WRQ and DATA packets are acknowledged by ACK or ERROR packets, while RRQ and ACK packets are acknowledged by DATA or ERROR packets.

5.3 ACK packets

    ACK packets (opcode 4) have the following format:
    - Opcode (2 bytes)
    - Block number (2 bytes)

   The block number in an ACK echoes the block number of the DATA packet being acknowledged.
   A WRQ is acknowledged with an ACK packet having a block number of zero.

5.4 ERROR packets

    ERROR packets (opcode 5) have the following format:
    - Opcode (2 bytes)
    - ErrorCode (2 bytes)
    - ErrMsg (variable-length string)
    - terminating 0 (1 byte)

   An ERROR packet can be the acknowledgment of any other type of packet.
   The error code is an integer indicating the nature of the error.
   The error message is intended for human consumption, and should be a string in netascii terminated with a zero byte.

   Error codes are listed in the following table:

   Error Codes
   Value     Meaning

   0         Not defined, see error message (if any).
   1         File not found.
   2         Access violation.
   3         Disk full or allocation exceeded.
   4         Illegal TFTP operation.
   5         Unknown transfer ID.
   6         File already exists.
   7         No such user.


6. Normal Termination

   The end of a transfer is marked by a DATA packet that contains between 0 and 511 bytes of data (i.e., Datagram length < 524).
   This packet is acknowledged by an ACK packet like all other DATA packets.
   The host acknowledging the final DATA packet may terminate its side of the connection on sending the final ACK.
   Dallying is encouraged.
   The host sending the final ACK should wait for a while before terminating in order to retransmit the final ACK if it has been lost.
   The acknowledger will know that the ACK has been lost if it receives the final DATA packet again.
   The host sending the last DATA must retransmit it until the packet is acknowledged or the sending host times out.
   If the response is an ACK, the transmission was completed successfully.
   If the sender of the data times out and is not prepared to retransmit any more, the transfer may or may not have been completed successfully and the connection is closed.

7. Premature Termination

   If a request can not be granted, or some error occurs during the transfer, then an ERROR packet (opcode 5) is sent.
   An error packet will not be retransmitted or acknowledged, so it may never be received.
   Timeouts must also be used to detect errors.
