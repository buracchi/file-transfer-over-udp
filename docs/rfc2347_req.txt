                         TFTP Option Extension

Introduction

   File transfer options can be negotiated prior to the transfer using a request-respond-acknowledge sequence mechanism.

Packet Formats

   TFTP options are appended to the Read Request and Write Request packets.
   A new type of TFTP packet, the Option Acknowledgment (OACK), is used to acknowledge a client's option negotiation request.
   A new error code (8) indicates that a transfer should be terminated due to option negotiation.

   Options are appended to a TFTP Read Request or Write Request packet as follows:

      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+-->    >-------+---+---~~---+---+
      |  opc  |filename| 0 |  mode  | 0 |  opt1  | 0 | value1 | 0 | <    <  optN  | 0 | valueN | 0 |
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+-->    >-------+---+---~~---+---+

      opc
         The opcode field contains either a 1, for Read Requests, or 2, for Write Requests.

      filename
         The name of the file to be read or written. This is a zero terminated field.

      mode
         The mode of the file transfer: "netascii" or "octet".  This is a zero terminated field.

      opt1
         The first option, in case-insensitive ASCII (e.g., blksize). This is a zero terminated field.

      value1
         The value associated with the first option, in case-insensitive ASCII.  This is a zero terminated field.

      optN, valueN
         The final option/value pair.  Each zero terminated field is specified in case-insensitive ASCII.

   The options and values are all zero terminated, in keeping with the original request format.
   If multiple options are to be negotiated, they are appended to each other.
   The order in which options are specified is not significant.
   The maximum size of a request packet is 512 octets.

   The OACK packet has the following format:

      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+
      |  opc  |  opt1  | 0 | value1 | 0 |  optN  | 0 | valueN | 0 |
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+

      opc
         The opcode field contains a 6, for Option Acknowledgment.

      opt1
         The first option acknowledgment, copied from the original request.

      value1
         The acknowledged value associated with the first option.

      optN, valueN
         The final option/value acknowledgment pair.

Negotiation Protocol

   The client appends options at the end of the Read Request or Writecrequest packet.
   Any number of options may be specified.
   An option may only be specified once.
   The order of the options is not significant.

   If the server supports option negotiation, and it recognizes one or more of the options specified in the request packet, the server may respond with an Options Acknowledgment (OACK).
   Each option the server recognizes, and accepts the value for, is included in the OACK.
   The server must not include in the OACK any option which had not been specifically requested by the client.
   Options which the server does not support should be omitted from the OACK.
   Options which the server does not support should not cause an ERROR packet to be generated.
   If the value of a supported option is invalid, the specification for that option will indicate whether the server should simply omit the option from the OACK, respond with an alternate value, or send an ERROR packet, with error code 8, to terminate the transfer.

   An option not acknowledged by the server must be ignored by the client and server as if it were never requested.
   If multiple options were requested, the client must use those options which were acknowledged by the server and must not use those options which were not acknowledged by the server.

   When the client appends options to the end of a Read Request packet, three possible responses may be returned by the server:
      - OACK (acknowledge of Read Request and the options)
      - DATA (acknowledge of Read Request, but not the options)
      - ERROR (the request has been denied)

   When the client appends options to the end of a Write Request packet, three possible responses may be returned by the server:
      - OACK (acknowledge of Write Request and the options)
      - ACK (acknowledge of Write Request, but not the options)
      - ERROR (the request has been denied)

   In the event that a server returns an error for a request which carries an option, the client may attempt to repeat the request without appending any options.

   If the transfer was initiated with a Read Request, then an ACK (with the data block number set to 0) is sent by the client to confirm the values in the server's OACK packet.
   If the transfer was initiated with a Write Request, then the client begins the transfer with the first DATA packet, using the negotiated values.
   If the client rejects the OACK, then it sends an ERROR packet, with error code 8, to the server and the transfer is terminated.

   A client acknowledging an OACK, with an appropriate non-error response, will agreed to use only the options and values returned by the server.
   If the client receives an OACK containing an unrequested option, it should respond with an ERROR packet, with error code 8, and terminate the transfer.

Examples

   Read Request

      client                                           server
      -------------------------------------------------------
      |1|foofile|0|octet|0|blksize|0|1432|0|  -->               RRQ
                                    <--  |6|blksize|0|1432|0|   OACK
      |4|0|  -->                                                ACK
                             <--  |3|1| 1432 octets of data |   DATA
      |4|1|  -->                                                ACK
                             <--  |3|2| 1432 octets of data |   DATA
      |4|2|  -->                                                ACK
                             <--  |3|3|<1432 octets of data |   DATA
      |4|3|  -->                                                ACK

   Write Request

      client                                           server
      -------------------------------------------------------
      |2|barfile|0|octet|0|blksize|0|2048|0|  -->               RRQ
                                    <--  |6|blksize|0|2048|0|   OACK
      |3|1| 2048 octets of data |  -->                          DATA
                                                   <--  |4|1|   ACK
      |3|2| 2048 octets of data |  -->                          DATA
                                                   <--  |4|2|   ACK
      |3|3|<2048 octets of data |  -->                          DATA
                                                      <--  |4|3|   ACK
